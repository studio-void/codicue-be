generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum BodyType {
  INVERTED_TRIANGLE // 역삼각형
  TRIANGLE // 삼각형
  RECTANGLE // 직사각형
  APPLE // 사과형
  PEAR // 배형
  HOURGLASS // 모래시계형
}

enum ItemCategory {
  TOP
  BOTTOM
  DRESS
  OUTERWEAR
  SHOES
  ACCESSORIES
}

enum Style {
  MINIMAL // 미니멀
  EFFORTLESS // 꾸안꾸
  STREET // 스트릿
  HIPHOP // 힙합
  CLASSIC // 클래식
  ROMANTIC // 로맨틱
  CASUAL // 캐주얼
  FORMAL // 포멀
  VINTAGE // 빈티지
  BOHEMIAN // 보헤미안
}

model User {
  id             Int      @id @default(autoincrement())
  email          String   @unique
  password       String
  name           String
  point          Int      @default(0)
  preferredStyle Style[] // 추구하는 스타일 (배열)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  body         Body?          @relation
  pointHistory PointHistory[]
  chats        Chat[] // User가 참여한 채팅들
  messages     Message[] // User가 보낸 메시지들
  reviews      Review[] // User가 작성한 리뷰들
  items        Item[] // User가 소유한 아이템들
}

model Body {
  id               Int       @id @default(autoincrement())
  userId           Int       @unique
  height           Float // 키 (cm) - 필수
  weight           Float // 몸무게 (kg) - 필수
  shoulderWidth    Float? // 어깨넓이 (cm) - 선택
  waistSize        Float? // 허리둘레 (cm) - 선택
  legRatio         Float? // 다리 비율 (%) - 선택
  recommendedStyle String? // 추천 스타일 - 선택
  bodyType         BodyType? // 체형 종류 - 선택
  summary          String? // 체형 한줄평 - 선택
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Stylist {
  id              Int      @id @default(autoincrement())
  email           String   @unique
  password        String
  name            String
  rating          Float    @default(0) // 평균 별점
  reviewCount     Int      @default(0) // 리뷰 개수
  isVerified      Boolean  @default(false) // 인증 상태
  introduction    String? // 소개글
  profileImageUrl String? // 프로필 이미지
  specialtyStyles Style[]  @default([]) // 전문 스타일 (배열)
  career          String[] @default([]) // 약력 (배열) - 선택사항
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  chats    Chat[] // 스타일리스트가 참여한 채팅들
  messages Message[] // 스타일리스트가 보낸 메시지들  
  reviews  Review[] // 스타일리스트에 대한 리뷰들
}

model Item {
  id                  Int          @id @default(autoincrement())
  userId              Int // 소유자 ID
  name                String // 이름
  category            ItemCategory // 카테고리
  imageUrl            String // 이미지 URL
  recommendedBodyType BodyType[]   @default([]) // 추천 체형 (배열)
  advice              String // 조언
  tags                String[]     @default([]) // 태그 (배열)
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Chat {
  id        Int      @id @default(autoincrement())
  userId    Int // 사용자 ID
  stylistId Int // 스타일리스트 ID
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  stylist  Stylist   @relation(fields: [stylistId], references: [id], onDelete: Cascade)
  messages Message[] // 메시지들
}

model Message {
  id         Int      @id @default(autoincrement())
  chatId     Int // 채팅방 ID
  senderId   Int? // 보낸 사람 ID (User일 경우)
  stylistId  Int? // 보낸 사람 ID (Stylist일 경우)
  content    String // 내용
  isFromUser Boolean // true: User가 보낸 메시지, false: Stylist가 보낸 메시지
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  chat    Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  user    User?    @relation(fields: [senderId], references: [id], onDelete: Cascade)
  stylist Stylist? @relation(fields: [stylistId], references: [id], onDelete: Cascade)
}

model Review {
  id        Int      @id @default(autoincrement())
  userId    Int // 리뷰 작성자 (User)
  stylistId Int // 리뷰 대상 (Stylist)
  rating    Int // 평점 (1-5)
  comment   String // 리뷰 내용
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  stylist Stylist @relation(fields: [stylistId], references: [id], onDelete: Cascade)
}

model PointHistory {
  id           Int      @id @default(autoincrement())
  userId       Int // 사용자 ID
  changeAmount Int // 변경 포인트 (+ 또는 -)
  reason       String // 변경 사유
  createdAt    DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
